---

azure:
  # List of subscription IDs
  # used to limit all scraping to these subscription IDs (if not set: use all visible subscriptions)
  #subscriptions: []

  # List of Azure locations/regions
  # used to fetch quotas for these regions
  locations: [westeurope, northeurope]

  # List of tags
  # used to attach these tags as labels ("tag_{tagname}") to metrics
  # documentation: https://github.com/webdevops/go-common/blob/main/azuresdk/README.md#tag-handling
  # examples:
  # - owner?inherit&toLower
  # - costCenter?source=resourceGroup&toLower
  # - client?source=subscription&toUpper
  # - foo?name=bar
  resourceTags: []
  resourceGroupTags: []

collectors:
  # Subscription metrics
  general:
    # Defines how often it should scrape (not defined or 0 = disabled)
    scrapeTime: 5m

  # Resource and ResourceGroup metrics
  resource:
    scrapeTime: 5m

  # Subscription quotas (needs locations)
  quota:
    scrapeTime: 5m

  # Defender (security) metrics
  # score, recommendations, ...
  defender:
    scrapeTime: 5m

  # Health status of resources
  resourceHealth:
    scrapeTime: 5m
    summaryMaxLength: 0

  # RoleDefinitions & RoleAssignments
  iam:
    scrapeTime: 5m

  # MsMgraph metrics (applications, serviceprincipals incl. credential/secrets expiry time)
  graph:
    scrapeTime: 5m
    filter:
      application:      ""
      servicePrincipal: ""

  # Azure cost metrics (cost queries, budgets)
  # needs queries below
  costs:
    scrapeTime: 5m

    queries:
      - # name of metric (azurerm_costs_${name})
        name: by_resourceGroup

        # metric help, optional
        help: Costs by ResourceGroup

        # optional, see https://learn.microsoft.com/en-us/rest/api/cost-management/query/usage?tabs=HTTP
        # will disable fetching by subscription and will enable fetching by scope
        #scopes: [...]
        # '/subscriptions/{subscriptionId}/' for subscription scope
        # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope
        # '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope
        # '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope
        # '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope
        # '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope
        # '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for billingProfile scope
        # '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}' for invoiceSection scope
        # '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for partners

        # filter by subscriptions (overwrite global subscription filter)
        #subscriptions: [...]

        # see https://learn.microsoft.com/en-us/rest/api/cost-management/query/usage?tabs=HTTP
        # for tags use format: tag:{tagname}
        #                  eg: tag:owner
        dimensions: [ResourceGroupName]

        # None, Daily, Monthly, Accumulated
        granularity: None

        # timePeriod:
        #   fromDuration: -720h
        #   toDuration: 0s

        # UsageQuantity, PreTaxCost, Cost, CostUSD, PreTaxCostUSD, see https://learn.microsoft.com/en-us/rest/api/cost-management/query/usage?tabs=HTTP
        valueField: PreTaxCost

        # see https://learn.microsoft.com/en-us/rest/api/cost-management/query/usage?tabs=HTTP
        timeFrames: [MonthToDate, YearToDate]

        # optional, additional static labels
        labels: {}

  # Portscan of Azure Public IPs
  portscan:
    scrapeTime: 12h
    scanner: {}
      # How many Azure Public IPs are scanned in parallel
      # parallel: 2

      # How many ports are scanned in parallel
      # threads: 1000

      # Timeout in seconds
      # timeout: 5

      # Ports to scan
      # ports: [22,80,443,3389]
